[
  {
    "title": "Deploy Django - django.config",
    "url": "https://www.w3schools.com/django/django_deploy_config.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDo not share my Personal Information\nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDeploy Django - django.config\n❮ Previous\nNext ❯\nProvider-Specific Settings\n\nWe have chosen AWS as our hosting provider, and Elastic Beanstalk as a service to deploy the Django project, and it has some specific requirements.\n\n.ebextension Folder\n\nIt requires that you create a folder on the root level of your project called .ebextensions:\n\nmy_tennis_club\n    .ebextensions/\n    members/\n    my_tennis_club/\n    mystaticfiles/\n    productionfiles/\n    db.sqlite3\n    manage.py\n    requirements.txt\n\nCreate django.config File\n\nIn the .ebextensions folder, create a file called django.config:\n\nmy_tennis_club\n    .ebextensions/\n        django.config\n\n\nOpen the file and insert these settings:\n\nmy_tennis_club/.ebextensions/django.config:\n\noption_settings:\n  aws:elasticbeanstalk:container:python:\n    WSGIPath: my_tennis_club.wsgi:application\n\n\nNote: These steps are specific for AWS and Elastic beanstalk, but every provider has some provider-specific settings.\n\nThe next step is to wrap all the dependencies into one .zip file, which you will learn in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n"
  },
  {
    "title": "Deploy Django - Create Requirements",
    "url": "https://www.w3schools.com/django/django_deploy_requirements.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDeploy Django - Create Requirements\n❮ Previous\nNext ❯\nLock in Dependencies\n\nWhen you create a Django application, there are some Python packages that your project depends on.\n\nDjango itself is a Python package, and we have to make sure that the server where we deploy our project also has the Django package installed, and all the other packages your project requires.\n\nLuckily there is a command for this as well, just run this command in the command view:\n\npy -m pip freeze > requirements.txt\n\nThe result of the above command, is a file called requirements.txt being created in the project:\n\nmy_tennis_club\n    members/\n    my_tennis_club/\n    mystaticfiles/\n    productionfiles/\n    db.sqlite3\n    manage.py\n\n    requirements.txt\n\nThe file contains all the packages that this project depends on: with this content:\n\nmy_tennis_club/requirements.txt:\n\nasgiref==3.5.2\nDjango==4.1.4\npsycopg2-binary==2.9.5\nsqlparse==0.4.3\ntzdata==2022.7\nwhitenoise==6.2.0\n\nNote: You can create this file on your own, and insert the packages manually, just make sure you get all the packages your project depends on, and you must name the file requirements.txt.\n\nNow the hosting provider knows which packages to install when we deploy our project.\n\nBut Elastic Beanstalk needs more information, go to the next chapter to create an \"EB\" config file.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Deploy Django - Choose Provider",
    "url": "https://www.w3schools.com/django/django_deploy_provider.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDeploy Django - Choose Provider\n❮ Previous\nNext ❯\nDeploy to the World\n\nTo deploy a project means to make it visible for other people on the internet.\n\nSo far, in this tutorial, we have made a Django project that runs locally on your computer. This is often called, \"in development\", and when we have deployed it, we call it \"in production\".\n\nWhere to Deploy?\n\nThere are many providers out there that offers servers for Django projects. In this tutorial we will use the Amazon Web Services (AWS) platform, mainly because they offer a free solution that only requires you to create an AWS account.\n\nNote: you can choose whatever server provider you like, they will all give you the same result, but they will have some provider-specific settings that you should be aware of when following this tutorial.\n\nAWS\n\nLog into your AWS account. (If you do not have an AWS account, follow the steps in the Create AWS Account chapter.)\n\nAWS Console\n\nOnce you have signed in, you should be directed to the AWS Console Home page:\n\nElastic Beanstalk\n\nWe will be using a service called \"Elastic Beanstalk\" to deploy the Django project.\n\nIn the search field at the top, search for \"elastic beanstalk\", and click to start the service:\n\nRun Demo\n\nLock in Dependencies\n\nOnce you have started the \"Elastic Beanstalk\" service, we could start with the deployment, but first we need to lock in some dependencies, which means to make you local Django project ready for deployment.\n\nYou will learn how to in the next chapters.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - PostgreSQL - Add Members",
    "url": "https://www.w3schools.com/django/django_db_add_members.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nPostgreSQL - Add Members\n❮ Previous\nNext ❯\nMembers\n\nThe \"My Tennis Club\" project has no members: 127.0.0.1:8000/.\n\nThat is because we have created a brand new database, and it is empty.\n\nThe old SQLite database contained 5 members, so let us dive into the admin interface and add the same 5 members.\n\nBut first we have to create a new superuser.\n\nCreate superuser\n\nSince we now have a new database, we have to create the superuser once again:\n\nThis is done by typing this command in the command view:\n\npy manage.py createsuperuser\n\nWhich will give this prompt:\n\nUsername:\n\nHere you must enter: username, e-mail address, (you can just pick a fake e-mail address), and password:\n\nUsername: johndoe\nEmail address: johndoe@dummymail.com\nPassword:\nPassword (again):\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nThis password is entirely numeric.\nBypass password validation and create user anyway? [y/N]:\n\nMy password did not meet the criteria, but this is a test environment, and I choose to create user anyway, by enter y:\n\nBypass password validation and create user anyway? [y/N]: y\n\nIf you press [Enter], you should have successfully created a user:\n\nSuperuser created successfully.\n\nNow start the server again:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/admin in the address bar.\n\nAnd fill in the form with the correct username and password:\n\nWhich should result in this interface:\n\nAdd Members\n\nWhen you are in the admin interface, click the \"Add\" button for \"Members\", and start inserting new members until you have a list like this:\n\nMy Tennis Club\n\nIn the browser window, type 127.0.0.1:8000/members in the address bar.\n\nAnd once again you have a Tennis Club page with 5 members!\n\nNext: let's deploy this project, so that the whole world can see it!\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Connect to PostgreSQL Database",
    "url": "https://www.w3schools.com/django/django_db_connect.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nConnect to Database\n❮ Previous\nNext ❯\nModify Settings\n\nTo make Django able to connect to your database, you have to specify it in the DATABASES tuple in the settings.py file.\n\nBefore, it looked like this:\n\nSQLite\nGet your own Django Server\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n.\n\nNow, you should change it to look like this:\n\nPostgreSQL\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'masteruser',\n        'PASSWORD': '12345678',\n        'HOST': 'w3-django-project.cdxmgq9zqqlr.us-east-1.rds.amazonaws.com',\n        'PORT': '5432'\n    }\n}\n.\n\nNote: The values will be different for your project.\n\nEngine?\n\nAs you can see in the settings.py file, we insert postgresql instead of sqlite.\n\nName?\n\nThe database does not have a name, but you have to assign one in order to access the database.\n\nIf no name is given, the provider accepts 'postgres' as the name of the database.\n\nUsername and Password?\n\nInsert the username and password that you specified when you created the database.\n\nHost? Port?\n\nAs you can see in the settings.py file, we insert postgresql instead of sqlite, and insert the username and password that we specified when we created the database.\n\nThe HOST and PORT can be found under the \"Connectivity & security\" section in the RDS instance. They are described as \"Endpoint\" and \"Port\":\n\nWhich for my project is this:\n\n'HOST': 'w3-django-project.cdxmgq9zqqlr.us-east-1.rds.amazonaws.com'\n'PORT': '5432'\n\nMigrate\n\nOnce we have done the changes in settings.py, we must run a migration in our virtual environment, before the changes will take place:\n\npy manage.py migrate\n\nWhich will give you this result:\n\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, members, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying members.0001_initial... OK\n  Applying members.0002_members_delete_member... OK\n  Applying members.0003_rename_members_member... OK\n  Applying sessions.0001_initial... OK\n\nNow, if you run the project:\n\npy manage.py runserver\n\nAnd view it in your browser: 127.0.0.1:8000/.\n\nYou will get the home page of the project, but if you click on the \"members\" link, you will see that there are no members.\n\nThat is because the database is empty. In the next chapter we will fill the database with members.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Create PostgreSQL Database",
    "url": "https://www.w3schools.com/django/django_db_create_rds.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nCreate PostgreSQL Database\n❮ Previous\nNext ❯\nCreate Database\n\nInside the RDS service, create a database, either by navigating to the Database section, or just click the \"Create database\" button:\n\nSettings\n\nOnce you have started creating a database, you will be given some choices for the type and settings of your database.\n\nTo add a PostgreSQL database to your Django project, choose the following options:\n\nStandard creation method:\n\nPostgreSQL engine method:\n\nFree Tier Template:\n\nName of database, username, and password\n\nYou can choose any name, username, and password:\n\nKeep the default instance configuration:\n\nCheck off the storage autoscaling:\n\nIt can be a good thing to enable storage autoscaling, but for this tutorial it is not necessary.\n\nGrant public access, and create a new security group:\n\nGive the security group a name, we will call it \"w3-django\":\n\nKeep default db authentications:\n\nKeep default monitoring:\n\nClick Create database:\n\nThis will take a few minutes, but when it is finished, you will have a new PostgreSQL database, almost ready to run on your Django project!\n\nIn the next chapter you will learn how to connect your project to the database.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Create AWS Account",
    "url": "https://www.w3schools.com/django/django_db_create_aws_account.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nCreate AWS Account\n❮ Previous\nNext ❯\nWhy AWS?\n\nThere are many providers out there that can host Django projects and PostgreSQL databases.\n\nIn this tutorial we will use the Amazon Web Services (AWS) platform, mainly because they offer a free solution that can host both Django projects and PostgreSQL databases. All you need is an AWS account.\n\nNote: you can choose whatever server provider you like, they will most likely all give you a satisfying result, but they will have some provider-specific settings that you should be aware of when following this tutorial.\n\nAWS\n\nGo to aws.amazon.com, and create an account:\n\nSign In\n\nOnce you have created an AWS account, it is time to sign in for the first time:\n\nAWS Console\n\nIf this is your first time you sign into your AWS account, you will be directed to the AWS Console Home page:\n\nAdd the RDS Service\n\nOnce you have an AWS account, you can start creating a database.\n\nWe will use a database service at AWS, called RDS.\n\nIn the search field, search for \"RDS\", and click to start the service:\n\n\n\n\nOnce the service has started, you should see something like this:\n\n\n\n\n\n\n\nIn the next chapter we will create the PostgreSQL database.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Add CSS File to the Project",
    "url": "https://www.w3schools.com/django/django_add_css_file_project.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nAdd CSS File to the Project\n❮ Previous\nNext ❯\nThe Project - My Tennis Club\n\nIf you have followed the steps in the entire Django tutorial, you will have a my_tennis_club project on your computer, with 5 members:\n\nRun Example\n\nWe want to add a stylesheet to this project, and put it in the mystaticfiles folder:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n    mystaticfiles/\n        mystyles.css\n\n\nThe name of the CSS file is your choice, we call it mystyles.css in this project.\n\nOpen the CSS file and insert the following:\n\nmy_tennis_club/mystaticfiles/mystyles.css:\n\nbody {\n  background-color: violet;\n}\n\nModify the Master Template\n\nNow you have a css file, the next step will be to include this file in the master template:\n\nOpen the master template file and add the following:\n\nmy_tennis_club/members/templates/master.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %}</title>\n  <link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\">  \n</head>\n<body>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>\n \n\n \n\nCheck Settings\n\nMake sure your settings.py file contains a STATICFILES_DIRS list with a reference to the mystaticfiles folder on the root directory, and that you have specified a STATICFILES_ROOT folder:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n#Add this in your settings.py file:\nSTATICFILES_DIRS = [\n    BASE_DIR / 'mystaticfiles'\n]\n.\n.\nCollect Static Files\n\nEvery time you make a change in a static file, you must run the collectstatic command to make the changes take effect:\n\npy manage.py collectstatic\n\nIf you have executed the command earlier in the project, Django will prompt you with a question:\n\nYou have requested to collect static files at the destination\nlocation as specified in your settings:\n\n    C:\\Users\\Your Name\\myworld\\my_tennis_club\\productionfiles\n\nThis will overwrite existing files!\nAre you sure you want to do this?\n\nType 'yes' to continue, or 'no' to cancel:\n\nType 'yes'. This will update any changes done in the static files, and give you this result:\n\n1 static file copied to 'C:\\Users\\Your Name\\minverden\\my_tennis_club\\productionfiles', 132 unmodified.\n\nNow, if you run the project:\n\npy manage.py runserver\n\nIt will look like this:\n\nRun Example\n\nIf you have followed all the steps on you own computer, you can see the result in your own browser:\n\nIn the browser window, type 127.0.0.1:8000/members/ in the address bar.\n\nSpice up the Style!\n\nIn the example above we showed you how to include a stylesheet to your project.\n\nWe ended up with a purple web page, but CSS can do more than just change the background color.\n\nWe want to do more with the styles, and end up with a result like this:\n\nRun Example\n\nFirst, replace the content of the mystyles.css file with this:\n\nmy_tennis_club/mystaticfiles/mystyles.css:\n\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap');\nbody {\n  margin:0;\n  font: 600 18px 'Source Sans Pro', sans-serif;\n  letter-spacing: 0.64px;\n  color: #585d74;\n}\n.topnav {\n  background-color:#375BDC;\n  color:#ffffff;\n  padding:10px;\n}\n.topnav a:link, .topnav a:visited {\n  text-decoration: none;\n  color: #ffffff; \n}\n.topnav a:hover, .topnav a:active {\n  text-decoration: underline;\n}\n.mycard {\n  background-color: #f1f1f1;\n  background-image: linear-gradient(to bottom, #375BDC, #4D70EF); \n  background-size: 100% 120px;\n  background-repeat: no-repeat;\n  margin: 40px auto;\n  width: 350px;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23); \n  padding: 20px;\n}\n.mycard h1 {\n  text-align: center;\n  color:#ffffff;\n  margin:20px 0 60px 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\nli {\n  background-color: #ffffff;\n  background-image: linear-gradient(to right, #375BDC, #4D70EF); \n  background-size: 50px 60px;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  transition: transform .25s;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23);\n  padding: 15px;\n  padding-left: 70px;\n  margin-top: 5px;\n}\nli:hover {\n  transform: scale(1.1);\n}\na:link, a:visited {\n  color: #375BDC; \n}\n.main, .main h1 {\n  text-align:center;\n  color:#375BDC;\n}\nModify Templates\n\nYou also have to make some changes to the templates:\n\nMaster\n\nWe want all pages to have the same top navigation, therefor we insert the top navigation into master.html:\n\nmy_tennis_club/members/templates/master.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\">\n  <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n\n<div class=\"topnav\">\n  <a href=\"/\">HOME</a> |\n  <a href=\"/members\">MEMBERS</a>\n</div>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>\n \n\n \n\n \n\n \n\nMembers\n\nIn all_members.html we want to make som changes in the HTML code.\n\nThe members are put in a div element, and the links become list items with onclick attributes.\n\nWe also want to remove the navigation, because that is now a part of the master template.\n\nmy_tennis_club/members/templates/all_members.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n  <div class=\"mycard\">\n    <h1>Members</h1>\n    <ul>\n      {% for x in mymembers %}\n        <li onclick=\"window.location = 'details/{{ x.id }}'\">{{ x.firstname }} {{ x.lastname }}</li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}\nDetails\n\nIn details.html we will put the member details in a div element, and remove the link back to members, because that is now a part of the navigation in the master template.\n\nmy_tennis_club/members/templates/details.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  Details about {{ mymember.firstname }} {{ mymember.lastname }}\n{% endblock %}\n\n{% block content %}\n  <div class=\"mycard\">\n    <h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n    <p>Phone {{ mymember.phone }}</p>\n    <p>Member since: {{ mymember.joined_date }}</p>\n  </div>\n{% endblock %}  \nMain\n\nIn the main.html template, we will put some of the HTML code into a div element:\n\nmy_tennis_club/members/templates/main.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club\n{% endblock %}\n\n{% block content %}\n  <div class=\"main\">\n    <h1>My Tennis Club</h1>\n\n    <h3>Members</h3>\n  \n    <p>Check out all our <a href=\"members/\">members</a></p>\n  </div>\n{% endblock %}\n\nCollect Static Files\n\nSince we did some changes in the static mystyles.css file, we have to run the collectstatic command to make the changes take effect:\n\npy manage.py collectstatic\n\nNow, if you run the project:\n\npy manage.py runserver\n\nYou can see what the result should look like:\n\nRun Example\n\nOr, if you have followed all the steps on you own computer, you can see the result in your own browser:\n\nIn the browser window, type 127.0.0.1:8000/members/ in the address bar.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Introduction to PostgreSQL",
    "url": "https://www.w3schools.com/django/django_db_postgresql_intro.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nIntroduction to PostgreSQL\n❮ Previous\nNext ❯\nDatabase Engines\n\nDjango comes with a SQLite database which is great for testing and debugging at the beginning of a project.\n\nHowever, it is not very suitable for production.\n\nDjango also support these database engines:\n\nPostgreSQL\nMariaDB\nMySQL\nOracle\n\nWe will take a closer look at the PostgreSQL database engine.\n\nPostgreSQL\n\nPostgreSQL database is an open source relational database, which should cover most demands you have when creating a database for a Django project.\n\nIt has a good reputation, it is reliable, and it perform well under most circumstances.\n\nWe will add a PostgreSQL database to our Django project.\n\nTo be able to use PostgreSQL in Django we have to install a package called psycopg2.\n\nInstall psycopg2\n\nType this command in the command line to install the package. Make sure you are still inn the virtual environment:\n\npip install psycopg2-binary\n\nThe result should be something like this:\n\nCollecting psycopg2-binary\n  Downloading psycopg2_binary-2.9.5-cp39-cp39-win_amd64.whl (1.2 MB)\n    |████████████████████████████████| 1.2 MB 3.3 MB/s\nInstalling collected packages: psycopg2-binary\nSuccessfully installed psycopg2-binary-2.9.5\nWARNING: You are using pip version 20.2.3; however, version 22.3.1 is available. You should consider upgrading via the 'c:\\users\\Your Name\\myworld\\scripts\\python.exe -m pip install --upgrade pip' command.\n\nThe psycopg2 package is a driver that is necessary for PostgreSQL to work in Python.\n\nWe also need a server where we can host the database.\n\nIn this tutorial we have chosen the Amazon Web Services (AWS) platform, you will learn more about that in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Collect Static Files",
    "url": "https://www.w3schools.com/django/django_collect_static_files.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango - Collect Static Files\n❮ Previous\nNext ❯\nHandle Static Files\n\nStatic files in your project, like stylesheets, JavaScripts, and images, are not handled automatically by Django when DEBUG = False.\n\nWhen DEBUG = True, this worked fine, all we had to do was to put them in the static folder of the application.\n\nWhen DEBUG = False, static files have to be collected and put in a specified folder before we can use it.\n\nCollect Static Files\n\nTo collect all necessary static files for your project, start by specifying a STATIC_ROOT property in the settings.py file.\n\nThis specifies a folder where you want to collect your static files.\n\nYou can call the folder whatever you like, we will call it productionfiles:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n.\n.\n \n\n\nYou could manually create this folder and collect and put all static files of your project into this folder, but Django has a command that do this for you:\n\npy manage.py collectstatic\n\nWhich will produce this result:\n\n131 static files copied to 'C:\\Users\\your_name\\myworld\\my_tennis_club\\productionfiles'.\n\n131 files? Why so many? Well this is because of the admin user interface, that comes built-in with Django. We want to keep this feature in production, and it comes with a whole bunch of files including stylesheets, fonts, images, and JavaScripts.\n\nmy_tennis_club\n    members/\n    my_tennis_club/\n    productionfiles/\n        admin/\n        myfirst.css\n\nThe Example Should Work\n\nNow you have collected the static files of your project, and if you have installed WhiteNoise, the example from the Add Static Files chapter will finally work.\n\nStart the server and see the result:\n\npy manage.py runserver\n\nAnd check out the result in your own browser: 127.0.0.1:8000/testing/.\n\nExample\nGet your own Django Server\n\nmy_tennis_club/members/templates/template.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\n \n\n \n\nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Global Static Files",
    "url": "https://www.w3schools.com/django/django_add_global_static_files.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango - Global Static Files\n❮ Previous\nNext ❯\nAdd a Global CSS File\n\nWe have learned how to add a static file in the application's static folder, and how to use it in the application.\n\nBut what if other applications in your project wants to use the file?\n\nThen we have to create a folder on the root directory and put the file(s) there.\n\nIt is not enough to create a static folder in the root directory, and Django will fix the rest. We have to tell Django where to look for these static files.\n\nStart by creating a folder on the project's root level, this folder can be called whatever you like, I will call it mystaticfiles in this tutorial:\n\nmy_tennis_club\n    db.sqlite3\n    manage.py\n    my_tennis_club/\n    members/\n    mystaticfiles/\n\n\nAdd a CSS file in the mystaticfiles folder, the name is your choice, we will call it myglobal.css in this example:\n\nmy_tennis_club\n    db.sqlite3\n    manage.py\n    my_tennis_club/\n    members/\n    mystaticfiles/\n        myglobal.css\n\n\nOpen the CSS file and insert the following:\n\nmy_tennis_club/mystaticfiles/myglobal.css:\n\nbody {\n  color: violet;\n}\n\nModify Settings\n\nYou will have to tell Django to also look for static files in the mystaticfiles folder in the root directory, this is done in the settings.py file:\n\nAdd a STATICFILES_DIRS list:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n#Add this in your settings.py file:\nSTATICFILES_DIRS = [\n    BASE_DIR / 'mystaticfiles'\n]\n.\n.\n \n\n \n\n \n\n\nIn the STATICFILES_DIRS list, you can list all the directories where Django should look for static files.\n\nThe BASE_DIR keyword represents the root directory of the project, and together with the / \"mystaticfiles\", it means the mystaticfiles folder in the root directory.\n\nSearch Order\n\nIf you have files with the same name, Django will use the first occurrence of the file.\n\nThe search starts in the directories listed in STATICFILES_DIRS, using the order you have provided. Then, if the file is not found, the search continues in the static folder of each application.\n\nModify the Template\n\nNow you have a global CSS file for the entire project, which can be accessed from all your applications.\n\nTo use it in a template, use the same syntax as you did for the myfirst.css file:\n\nBegin the template with the following:\n\n{% load static %}\n\nAnd refer to the file like this:\n\n<link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">\nExample\nGet your own Django Server\n\nmy_tennis_club/members/templates/template.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\n \n\n \n\nRun Example »\nDidn't Work?\n\nThat is correct. You need to collect the static files once again.\n\nCollect Static Files\n\nRun the collectstatic command to collect the new static file:\n\npy manage.py collectstatic\n\nWhich will produce this result:\n\nYou have requested to collect static files at the destination\nlocation as specified in your settings:\n\n    C:\\Users\\Your Name\\myworld\\my_tennis_club\\productionfiles\n\nThis will overwrite existing files!\nAre you sure you want to do this?\n\nType 'yes' to continue, or 'no' to cancel:\n\nType yes:\n\nType 'yes' to continue, or 'no' to cancel: yes\n\nWhich will produce this result:\n\n1 static file copied to 'C:\\Users\\Your Name\\myworld\\my_tennis_club\\productionfiles', 131 unmodified.\nThe Example Should Work\n\nStart the server, and the example will work:\n\npy manage.py runserver\n\nCheck out the result in your own browser: 127.0.0.1:8000/testing/.\n\nExample\n\nmy_tennis_club/members/templates/template.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\n \n\n \n\nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Install WhiteNoise",
    "url": "https://www.w3schools.com/django/django_static_whitenoise.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango - Installing WhiteNoise\n❮ Previous\nNext ❯\nWhiteNoise\n\nDjango does not have a built-in solution for serving static files, at least not in production when DEBUG has to be False.\n\nWe have to use a third-party solution to accomplish this.\n\nIn this Tutorial we will use WhiteNoise, which is a Python library, built for serving static files.\n\nInstall WhiteNoise\n\nTo install WhiteNoise in your virtual environment, type the command below:\n\npip install whitenoise\n\nThe result should be something like this:\n\nCollecting whitenoise\n  Downloading whitenoise-6.2.0-py3-none-any.whl (19 kB)\nInstalling collected packages: whitenoise\nSuccessfully installed whitenoise-6.2.0\nWARNING: You are using pip version 20.2.3; however, version 22.3.1 is available.\nYou should consider upgrading via the 'c:\\users\\Your Name\\myworld\\scripts\\python.exe -m pip install --upgrade pip' command.\nModify Settings\n\nTo make Django aware of you wanting to run WhitNoise, you have to specify it in the MIDDLEWARE list in settings.py file:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n].\n.\n \n\nCollect Static Files\n\nThere are one more action you have to perform before you can serve the static file from the example in the previous chapter. You have to collect all static files and put them into one specified folder. You will learn how in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django QuerySet - Order By",
    "url": "https://www.w3schools.com/django/django_queryset_orderby.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango QuerySet - Order By\n❮ Previous\nNext ❯\nOrder By\n\nTo sort QuerySets, Django uses the order_by() method:\n\nExample\nGet your own Django Server\n\nOrder the result alphabetically by firstname:\n\nmydata = Member.objects.all().order_by('firstname').values()\n\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members ORDER BY firstname;\n\nDescending Order\n\nBy default, the result is sorted ascending (the lowest value first), to change the direction to descending (the highest value first), use the minus sign (NOT), - in front of the field name:\n\nExample\n\nOrder the result firstname descending:\n\nmydata = Member.objects.all().order_by('-firstname').values()\n\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members ORDER BY firstname DESC;\n\nMultiple Order Bys\n\nTo order by more than one field, separate the fieldnames with a comma in the order_by() method:\n\nExample\n\nOrder the result first by lastname ascending, then descending on id:\n\nmydata = Member.objects.all().order_by('lastname', '-id').values()\n\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members ORDER BY lastname ASC, id DESC;\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Add Static Files",
    "url": "https://www.w3schools.com/django/django_add_static_files.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango - Add Static File\n❮ Previous\nNext ❯\nCreate Static Folder\n\nWhen building web applications, you probably want to add some static files like images or css files.\n\nStart by creating a folder named static in your project, the same place where you created the templates folder:\n\nThe name of the folder has to be static.\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n        templates/\n        static/\n\n\nAdd a CSS file in the static folder, the name is your choice, we will call it myfirst.css in this example:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n        templates/\n        static/\n            myfirst.css\n\n\nOpen the CSS file and insert the following:\n\nmy_tennis_club/members/static/myfirst.css:\n\nbody {\n  background-color: lightblue;\n  font-family: verdana;\n}\n\nModify the Template\n\nNow you have a CSS file, with some CSS styling. The next step will be to include this file in a HTML template:\n\nOpen the HTML file and add the following:\n\n{% load static %}\n\nAnd:\n\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\nExample\nGet your own Django Server\n\nmy_tennis_club/members/templates/template.html:\n\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\n \n\n \n\nRun Example »\n\nRestart the server for the changes to take effect:\n\npy manage.py runserver\n\nAnd check out the result in your own browser: 127.0.0.1:8000/testing/.\n\nDidn't Work?\n\nJust testing? If you just want to play around, and not going to deploy your work, you can set DEBUG = True in the settings.py file, and the example above will work.\n\nPlan to deploy? If you plan to deploy your work, you should set DEBUG = False in the settings.py file. The example above will fail, because Django has no built-in solution for serving static files, but there are other ways to serve static files, you will learn how in the next chapter.\n\nExample (in development):\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n.\n.\n\nThis will make the example work, but we want you to choose DEBUG = False, because that is the best way to learn how to work with Django.\n\nChoose Debug = False\n\nFor the rest of this tutorial, we will run with DEBUG = False, even in development, because that is the best way to learn how to work with Django.\n\nExample:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n\n.\n.\nALLOWED_HOSTS\n\nWhen using DEBUG = False you have to specify which host name(s) are allowed to host your work. You could choose '127.0.0.1' or 'localhost' which both represents the address of your local machine.\n\nWe choose '*', which means any address are allowed to host this site. This should be change into a real domain name when you deploy your project to a public server.\n\nDidn't Work?\n\nThat is right, the example still does not work.\n\nYou will have install a third-party library in order to handle static files.\n\nThere are many alternatives, we will show you how to use a Python library called WhiteNoise in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django QuerySet - Filter",
    "url": "https://www.w3schools.com/django/django_queryset_filter.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango QuerySet - Filter\n❮ Previous\nNext ❯\nQuerySet Filter\n\nThe filter() method is used to filter your search, and allows you to return only the rows that matches the search term.\n\nAs we learned in the previous chapter, we can filter on field names like this:\n\nExample\nGet your own Django Server\n\nReturn only the records where the firstname is 'Emil':\n\nmydata = Member.objects.filter(firstname='Emil').values()\n\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members WHERE firstname = 'Emil';\n\nAND\n\nThe filter() method takes the arguments as **kwargs (keyword arguments), so you can filter on more than one field by separating them by a comma.\n\nExample\n\nReturn records where lastname is \"Refsnes\" and id is 2:\n\nmydata = Member.objects.filter(lastname='Refsnes', id=2).values()\n\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members WHERE lastname = 'Refsnes' AND id = 2;\n\nOR\n\nTo return records where firstname is Emil or firstname is Tobias (meaning: returning records that matches either query, not necessarily both) is not as easy as the AND example above.\n\nWe can use multiple filter() methods, separated by a pipe | character. The results will merge into one model.\n\nExample\n\nReturn records where firstname is either \"Emil\" or Tobias\":\n\nmydata = Member.objects.filter(firstname='Emil').values() | Member.objects.filter(firstname='Tobias').values()\n\nRun Example »\n\nAnother common method is to import and use Q expressions:\n\nExample\n\nReturn records where firstname is either \"Emil\" or Tobias\":\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\nfrom django.db.models import Q\n\ndef testing(request):\n  mydata = Member.objects.filter(Q(firstname='Emil') | Q(firstname='Tobias')).values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\nRun Example »\n\nIn SQL, the above statement would be written like this:\n\nSELECT * FROM members WHERE firstname = 'Emil' OR firstname = 'Tobias';\n\nField Lookups\n\nDjango has its own way of specifying SQL statements and WHERE clauses.\n\nTo make specific where clauses in Django, use \"Field lookups\".\n\nField lookups are keywords that represents specific SQL keywords.\n\nExample:\n\nUse the __startswith keyword:\n\n.filter(firstname__startswith='L');\n\n\nIs the same as the SQL statement:\n\nWHERE firstname LIKE 'L%'\n\n\nThe above statement will return records where firstname starts with 'L'.\n\nField Lookups Syntax\n\nAll Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.\n\nIn our Member model, the statement would be written like this:\n\nExample\n\nReturn the records where firstname starts with the letter 'L':\n\nmydata = Member.objects.filter(firstname__startswith='L').values()\nRun Example »\nField Lookups Reference\n\nA list of all field look up keywords:\n\nKeyword\tDescription\ncontains\tContains the phrase\nicontains\tSame as contains, but case-insensitive\ndate\tMatches a date\nday\tMatches a date (day of month, 1-31) (for dates)\nendswith\tEnds with\niendswith\tSame as endswidth, but case-insensitive\nexact\tAn exact match\niexact\tSame as exact, but case-insensitive\nin\tMatches one of the values\nisnull\tMatches NULL values\ngt\tGreater than\ngte\tGreater than, or equal to\nhour\tMatches an hour (for datetimes)\nlt\tLess than\nlte\tLess than, or equal to\nminute\tMatches a minute (for datetimes)\nmonth\tMatches a month (for dates)\nquarter\tMatches a quarter of the year (1-4) (for dates)\nrange\tMatch between\nregex\tMatches a regular expression\niregex\tSame as regex, but case-insensitive\nsecond\tMatches a second (for datetimes)\nstartswith\tStarts with\nistartswith\tSame as startswith, but case-insensitive\ntime\tMatches a time (for datetimes)\nweek\tMatches a week number (1-53) (for dates)\nweek_day\tMatches a day of week (1-7) 1 is sunday\niso_week_day\tMatches a ISO 8601 day of week (1-7) 1 is monday\nyear\tMatches a year (for dates)\niso_year\tMatches an ISO 8601 year (for dates)\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django include Tag",
    "url": "https://www.w3schools.com/django/django_tags_include.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango include Tag\n❮ Previous\nNext ❯\nInclude\n\nThe include tag allows you to include a template inside the current template.\n\nThis is useful when you have a block of content that is the same for many pages.\n\nExample\nGet your own Django Server\n\ntemplates/footer.html:\n\n<p>You have reached the bottom of this page, thank you for your time.</p>\n\n\ntemplates/template.html:\n\n<h1>Hello</h1>\n\n<p>This page contains a footer in a template.</p>\n\n{% include 'footer.html' %} \nRun Example »\nVariables in Include\n\nYou can send variables into the template by using the with keyword.\n\nIn the include file, you refer to the variables by using the {{ variablename }} syntax:\n\nExample\n\ntemplates/mymenu.html:\n\n<div>HOME | {{ me }} | ABOUT | FORUM | {{ sponsor }}</div>\n\n\ntemplates/template.html:\n\n<!DOCTYPE html>\n<html>\n<body>\n\n{% include \"mymenu.html\" with me=\"TOBIAS\" sponsor=\"W3SCHOOLS\" %}\n\n<h1>Welcome</h1>\n\n<p>This is my webpage</p>\n\n</body>\n</html> \nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django QuerySet",
    "url": "https://www.w3schools.com/django/django_queryset.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango QuerySet\n❮ Previous\nNext ❯\nDjango QuerySet\n\nA QuerySet is a collection of data from a database.\n\nA QuerySet is built up as a list of objects.\n\nQuerySets makes it easier to get the data you actually need, by allowing you to filter and order the data at an early stage.\n\nIn this tutorial we will be querying data from the Member table.\n\nMember:\n\n id \t firstname \t lastname \t phone \t joined_date \n 1 \t Emil \t Refsnes \t 5551234 \t 2022-01-05 \n 2 \t Tobias \t Refsnes \t 5557777 \t 2022-04-01 \n 3 \t Linus \t Refsnes \t 5554321 \t 2021-12-24 \n 4 \t Lene \t Refsnes \t 5551234 \t 2021-05-01 \n 5 \t Stalikken \t Refsnes \t 5559876 \t 2022-09-29 \n\n\nQuerying Data\n\nIn views.py, we have a view for testing called testing where we will test different queries.\n\nIn the example below we use the .all() method to get all the records and fields of the Member model:\n\nView\nGet your own Django Server\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.all()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\n\nThe object is placed in a variable called mydata, and is sent to the template via the context object as mymembers, and looks like this:\n\n<QuerySet [\n  <Member: Member object (1)>,\n  <Member: Member object (2)>,\n  <Member: Member object (3)>,\n  <Member: Member object (4)>,\n  <Member: Member object (5)>\n]>\n\nAs you can see, our Member model contains 5 records, and are listed inside the QuerySet as 5 objects.\n\nIn the template you can use the mymembers object to generate content:\n\nTemplate\n\ntemplates/template.html:\n\n<table border='1'>\n  <tr>\n    <th>ID</th>\n    <th>Firstname</th>\n    <th>Lastname</th>\n  </tr>\n  {% for x in mymembers %}\n    <tr>\n      <td>{{ x.id }}</td>\n        <td>{{ x.firstname }}</td>\n      <td>{{ x.lastname }}</td>\n    </tr>\n  {% endfor %}\n</table>\nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django QuerySet - Get Data",
    "url": "https://www.w3schools.com/django/django_queryset_get.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango QuerySet - Get Data\n❮ Previous\nNext ❯\nGet Data\n\nThere are different methods to get data from a model into a QuerySet.\n\nThe values() Method\n\nThe values() method allows you to return each object as a Python dictionary, with the names and values as key/value pairs:\n\nExample\nGet your own Django Server\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.all().values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\nRun Example »\nReturn Specific Columns\n\nThe values_list() method allows you to return only the columns that you specify.\n\nExample\n\nReturn only the firstname columns:\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.values_list('firstname')\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\nRun Example »\nReturn Specific Rows\n\nYou can filter the search to only return specific rows/records, by using the filter() method.\n\nExample\n\nReturn only the records where firstname is 'Emil'\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.filter(firstname='Emil').values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\nRun Example »\n\nYou will learn more about the filter() method in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django comment Tag",
    "url": "https://www.w3schools.com/django/django_tags_comment.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango comment Tag\n❮ Previous\nNext ❯\nComments\n\nComments allows you to have sections of code that should be ignored.\n\nExample\nGet your own Django Server\n<h1>Welcome Everyone</h1>\n{% comment %}\n  <h1>Welcome ladies and gentlemen</h1>\n{% endcomment %}\nRun Example »\nComment Description\n\nYou can add a message to your comment, to help you remember why you wrote the comment, or as message to other people reading the code.\n\nExample\n\nAdd a description to your comment:\n\n<h1>Welcome Everyone</h1>\n{% comment \"this was the original welcome message\" %}\n    <h1>Welcome ladies and gentlemen</h1>\n{% endcomment %}\nRun Example »\nSmaller Comments\n\nYou can also use the {# ... #} tags when commenting out code, which can be easier for smaller comments:\n\nExample\n\nComment out the word Everyone:\n\n<h1>Welcome{# Everyone#}</h1>\nRun Example »\nComment in Views\n\nViews are written in Python, and Python comments are written with the # character:\n\nExample\n\nComment out a section in the view:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  #context = {\n  # 'var1': 'John',\n  #}\n  return HttpResponse(template.render())\nRun Example »\n\nRead more about Python Comments in out Python Comment Tutorial.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django for Tag",
    "url": "https://www.w3schools.com/django/django_tags_for.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango for Tag\n❮ Previous\nNext ❯\nFor Loops\n\nA for loop is used for iterating over a sequence, like looping over items in an array, a list, or a dictionary.\n\nExample\nGet your own Django Server\n\nLoop through the items of a list:\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\nRun Example »\nExample\n\nLoop through a list of dictionaries:\n\n{% for x in cars %}\n  <h1>{{ x.brand }}</h1>\n  <p>{{ x.model }}</p>\n  <p>{{ x.year }}</p>\n{% endfor %} \nRun Example »\nData From a Model\n\nData in a model is like a table with rows and columns.\n\nThe Member model we created earlier has five rows, and each row has three columns:\n\n id \t firstname \t lastname \t phone \t joined_date \n 1 \t Emil \t Refsnes \t 5551234 \t 2022-01-05 \n 2 \t Tobias \t Refsnes \t 5557777 \t 2022-04-01 \n 3 \t Linus \t Refsnes \t 5554321 \t 2021-12-24 \n 4 \t Lene \t Refsnes \t 5551234 \t 2021-05-01 \n 5 \t Stalikken \t Refsnes \t 5559876 \t 2022-09-29 \n\nWhen we fetch data from the model, it comes as a QuerySet object, with a similar format as the cars example above: a list with dictionaries:\n\n<QuerySet [\n  {\n    'id': 1,\n    'firstname': 'Emil',\n    'lastname': 'Refsnes',\n    'phone': 5551234,\n    'joined_date': datetime.date(2022, 1, 5)\n  },\n  {\n    'id': 2,\n    'firstname': 'Tobias',\n    'lastname': 'Refsnes'\n    'phone': 5557777,\n    'joined_date': datetime.date(2021, 4, 1)\n  },\n  {\n    'id': 3,\n    'firstname': 'Linus',\n    'lastname': 'Refsnes'\n    'phone': 5554321,\n    'joined_date': datetime.date(2021, 12, 24)\n  },\n  {\n    'id': 4,\n    'firstname': 'Lene',\n    'lastname': 'Refsnes'\n    'phone': 5551234,\n    'joined_date': datetime.date(2021, 5, 1)\n  },\n  {\n    'id': 5,\n    'firstname': 'Stalikken',\n    'lastname': 'Refsnes'\n    'phone': 5559876,\n    'joined_date': datetime.date(2022, 9, 29)\n  }\n]> \nExample\n\nLoop through items fetched from a database:\n\n{% for x in members %}\n  <h1>{{ x.id }}</h1>\n  <p>\n    {{ x.firstname }}\n    {{ x.lastname }}\n  </p>\n{% endfor %} \nRun Example »\nReversed\n\nThe reversed keyword is used when you want to do the loop in reversed order.\n\nExample\n{% for x in members reversed %}\n  <h1>{{ x.id }}</h1>\n  <p>\n    {{ x.firstname }}\n    {{ x.lastname }}\n  </p>\n{% endfor %}  \nRun Example »\nEmpty\n\nThe empty keyword can be used if you want to do something special if the object is empty.\n\nExample\n<ul>\n  {% for x in emptytestobject %}\n    <li>{{ x.firstname }}</li>\n  {% empty %}\n    <li>No members</li>\n  {% endfor %}\n</ul> \nRun Example »\n\nThe empty keyword can also be used if the object does not exist:\n\nExample\n<ul>\n  {% for x in myobject %}\n    <li>{{ x.firstname }}</li>\n  {% empty %}\n    <li>No members</li>\n  {% endfor %}\n</ul> \nRun Example »\nLoop Variables\n\nDjango has some variables that are available for you inside a loop:\n\nforloop.counter\nforloop.counter0\nforloop.first\nforloop.last\nforloop.parentloop\nforloop.revcounter\nforloop.revcounter0\nforloop.counter\n\nThe current iteration, starting at 1.\n\nExample\n<ul>\n  {% for x in fruits %}\n    <li>{{ forloop.counter }}</li>\n  {% endfor %}\n</ul> \nRun Example »\nforloop.counter0\n\nThe current iteration, starting at 0.\n\nExample\n<ul>\n  {% for x in fruits %}\n    <li>{{ forloop.counter0 }}</li>\n  {% endfor %}\n</ul> \nRun Example »\nforloop.first\n\nAllows you to test if the loop is on its first iteration.\n\nExample\n\nDraw a blue background for the first iteration of the loop:\n\n<ul>\n  {% for x in fruits %}\n    <li\n      {% if forloop.first %}\n        style='background-color:lightblue;'\n      {% endif %}\n    >{{ x }}</li>\n  {% endfor %}\n</ul> \nRun Example »\nforloop.last\n\nAllows you to test if the loop is on its last iteration.\n\nExample\n\nDraw a blue background for the last iteration of the loop:\n\n<ul>\n  {% for x in fruits %}\n    <li\n      {% if forloop.last %}\n        style='background-color:lightblue;'\n      {% endif %}\n    >{{ x }}</li>\n  {% endfor %}\n</ul> \nRun Example »\nforloop.revcounter\n\nThe current iteration if you start at the end and count backwards, ending up at 1.\n\nExample\n<ul>\n  {% for x in fruits %}\n    <li>{{ forloop.revcounter }}</li>\n  {% endfor %}\n</ul> \nRun Example »\nforloop.revcounter0\n\nThe current iteration if you start at the end and count backwards, ending up at 0.\n\nExample\n<ul>\n  {% for x in fruits %}\n    <li>{{ forloop.revcounter0 }}</li>\n  {% endfor %}\n</ul> \nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django if Tag",
    "url": "https://www.w3schools.com/django/django_tags_if.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango if Tag\n❮ Previous\nNext ❯\nIf Statement\n\nAn if statement evaluates a variable and executes a block of code if the value is true.\n\nExample\nGet your own Django Server\n{% if greeting == 1 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\nElif\n\nThe elif keyword says \"if the previous conditions were not true, then try this condition\".\n\nExample\n{% if greeting == 1 %}\n  <h1>Hello</h1>\n{% elif greeting == 2 %}\n  <h1>Welcome</h1>\n{% endif %} \nRun Example »\nElse\n\nThe else keyword catches anything which isn't caught by the preceding conditions.\n\nExample\n{% if greeting == 1 %}\n  <h1>Hello</h1>\n{% elif greeting == 2 %}\n  <h1>Welcome</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %} \nRun Example »\nOperators\n\nThe above examples uses the == operator, which is used to check if a variable is equal to a value, but there are many other operators you can use, or you can even drop the operator if you just want to check if a variable is not empty:\n\nExample\n{% if greeting %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n==\n\nIs equal to.\n\nExample\n{% if greeting == 2 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n!=\n\nIs not equal to.\n\nExample\n{% if greeting != 1 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n<\n\nIs less than.\n\nExample\n{% if greeting < 3 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n<=\n\nIs less than, or equal to.\n\nExample\n{% if greeting <= 3 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n>\n\nIs greater than.\n\nExample\n{% if greeting > 1 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\n>=\n\nIs greater than, or equal to.\n\nExample\n{% if greeting >= 1 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\nand\n\nTo check if more than one condition is true.\n\nExample\n{% if greeting == 1 and day == \"Friday\" %}\n  <h1>Hello Weekend!</h1>\n{% endif %} \nRun Example »\nor\n\nTo check if one of the conditions is true.\n\nExample\n{% if greeting == 1 or greeting == 5 %}\n  <h1>Hello</h1>\n{% endif %} \nRun Example »\nand/or\n\nCombine and and or.\n\nExample\n{% if greeting == 1 and day == \"Friday\" or greeting == 5 %}\n\nRun Example »\n\nParentheses are not allowed in if statements in Django, so when you combine and and or operators, it is important to know that parentheses are added for and but not for or.\n\nMeaning that the above example is read by the interpreter like this:\n\n{% if (greeting == 1 and day == \"Friday\") or greeting == 5 %}\n\nin\n\nTo check if a certain item is present in an object.\n\nExample\n{% if 'Banana' in fruits %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %} \nRun Example »\nnot in\n\nTo check if a certain item is not present in an object.\n\nExample\n{% if 'Banana' not in fruits %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %} \nRun Example »\nis\n\nCheck if two objects are the same.\n\nThis operator is different from the == operator, because the == operator checks the values of two objects, but the is operator checks the identity of two objects.\n\nIn the view we have two objects, x and y, with the same values:\n\nExample\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'x': ['Apple', 'Banana', 'Cherry'], \n    'y': ['Apple', 'Banana', 'Cherry'], \n  }\n  return HttpResponse(template.render(context, request))  \n\nThe two objects have the same value, but is it the same object?\n\nExample\n{% if x is y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %}\nRun Example »\n\nLet us try the same example with the == operator instead:\n\nExample\n{% if x == y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %}\nRun Example »\n\nHow can two objects be the same? Well, if you have two objects that points to the same object, then the is operator evaluates to true:\n\nWe will demonstrate this by using the {% with %} tag, which allows us to create variables in the template:\n\nExample\n{% with var1=x var2=x %}\n  {% if var1 is var2 %}\n    <h1>YES</h1>\n  {% else %}\n    <h1>NO</h1>\n  {% endif %}\n{% endwith %}\nRun Example »\nis not\n\nTo check if two objects are not the same.\n\nExample\n{% if x is not y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %} \nRun Example »\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Template Tags",
    "url": "https://www.w3schools.com/django/django_template_tags.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Template Tags\n❮ Previous\nNext ❯\nTemplate Tags\n\nIn Django templates, you can perform programming logic like executing if statements and for loops.\n\nThese keywords, if and for, are called \"template tags\" in Django.\n\nTo execute template tags, we surround them in {% %} brackets.\n\nExample\nGet your own Django Server\n\ntemplates/template.html:\n\n{% if greeting == 1 %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Bye</h1>\n{% endif %}\n\nRun Example »\nDjango Code\n\nThe template tags are a way of telling Django that here comes something else than plain HTML.\n\nThe template tags allows us to to do some programming on the server before sending HTML to the client.\n\ntemplates/template.html:\n\n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>\nRun Example »\n\nIn the next chapters you will learn about the most common template tags.\n\nTag Reference\n\nA list of all template tags:\n\nTag\tDescription\nautoescape\tSpecifies if autoescape mode is on or off\nblock\tSpecifies a block section\ncomment\tSpecifies a comment section\ncsrf_token\tProtects forms from Cross Site Request Forgeries\ncycle\tSpecifies content to use in each cycle of a loop\ndebug\tSpecifies debugging information\nextends\tSpecifies a parent template\nfilter\tFilters content before returning it\nfirstof\tReturns the first not empty variable\nfor\tSpecifies a for loop\nif\tSpecifies a if statement\nifchanged\tUsed in for loops. Outputs a block only if a value has changed since the last iteration\ninclude\tSpecifies included content/template\nload\tLoads template tags from another library\nlorem\tOutputs random text\nnow\tOutputs the current date/time\nregroup\tSorts an object by a group\nresetcycle\tUsed in cycles. Resets the cycle\nspaceless\tRemoves whitespace between HTML tags\ntemplatetag\tOutputs a specified template tag\nurl\tReturns the absolute URL part of a URL\nverbatim\tSpecifies contents that should not be rendered by the template engine\nwidthratio\tCalculates a width value based on the ratio between a given value and a max value\nwith\tSpecifies a variable to use in the block\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Template Variables",
    "url": "https://www.w3schools.com/django/django_template_variables.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Template Variables\n❮ Previous\nNext ❯\nTemplate Variables\n\nIn Django templates, you can render variables by putting them inside {{ }} brackets:\n\nExample\nGet your own Django Server\n\ntemplates/template.html:\n\n<h1>Hello {{ firstname }}, how are you?</h1>\n\nRun Example »\nCreate Variable in View\n\nThe variable firstname in the example above was sent to the template via a view:\n\nviews.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'firstname': 'Linus',\n  }\n  return HttpResponse(template.render(context, request))\nRun Example »\n\nAs you can see in the view above, we create an object named context and fill it with data, and send it as the first parameter in the template.render() function.\n\nCreate Variables in Template\n\nYou can also create variables directly in the template, by using the {% with %} template tag.\n\nThe variable is available until the {% endwith %} tag appears:\n\nExample\n\ntemplates/template.html:\n\n{% with firstname=\"Tobias\" %}\n<h1>Hello {{ firstname }}, how are you?</h1>\n{% endwith %}\n\nRun Example »\n\nYou will learn more about template tags in the next chapter.\n\nData From a Model\n\nThe example above showed a easy approach on how to create and use variables in a template.\n\nNormally, most of the external data you want to use in a template, comes from a model.\n\nWe have created a model in the previous chapters, called Member, which we will use in many examples in the next chapters of this tutorial.\n\nTo get data from the Member model, we will have to import it in the views.py file, and extract data from it in the view:\n\nmembers/views.py:\n\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n\nNow we can use the data in the template:\n\ntemplates/template.html:\n\n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>\nRun Example »\n\nWe use the Django template tag {% for %} to loop through the members.\n\nYou will learn more about template tags in the next chapter.\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Add Members",
    "url": "https://www.w3schools.com/django/django_admin_add_members.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Add Members\n❮ Previous\nNext ❯\nAdd Members\n\nTo add a new member, click on the \"ADD MEMBERS\" button in the top right corner:\n\n  \n\nYou will get an empty form where you can fill in the members fields:\n\nFill in the fields and click \"SAVE\":\n\nNow the Members Model have 6 members:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Delete Members",
    "url": "https://www.w3schools.com/django/django_admin_delete_members.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Delete Members\n❮ Previous\nNext ❯\nDelete Members\n\nTo delete a new member, you can either select a member and choose the action \"Delete selected members\" like this:\n\nRun Demo\n\nOr you can open a member for editing, and click the red DELETE button at the bottom, like this:\n\nRun Demo\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Update Members",
    "url": "https://www.w3schools.com/django/django_admin_update_members.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Update Members\n❮ Previous\nNext ❯\nUpdate Members\n\nNow we are able to create, update, and delete members in our database, and we start by giving them all a date for when they became members.\n\nClick the first member, Stalikken, to open the record for editing, and give him a joined_date:\n\nWhile we are in here, let us give him a phone number as well:\n\nClick \"SAVE\" and go back to the list of all members:\n\nRepeat these steps and give all members a date and a phone number, and end up with a list like this:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Include Members",
    "url": "https://www.w3schools.com/django/django_admin_include_members.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Include Member\n❮ Previous\nNext ❯\nInclude Member in the Admin Interface\n\nTo include the Member model in the admin interface, we have to tell Django that this model should be visible in the admin interface.\n\nThis is done in a file called admin.py, and is located in your app's folder, which in our case is the members folder.\n\nOpen it, and it should look like this:\n\nmy_tennis_club/members/admin.py:\n\nfrom django.contrib import admin\n\n# Register your models here.\n\nInsert a couple of lines here to make the Member model visible in the admin page:\n\nmy_tennis_club/members/admin.py:\n\nfrom django.contrib import admin\nfrom .models import Member\n\n# Register your models here.\nadmin.site.register(Member)\n\n\nNow go back to the browser and you should get this result:\n\nClick Members and see the five records we inserted earlier in this tutorial:\n\nChange Display\n\nIn the list in the screenshot above, we see \"Member object (1)\", \"Member object (2)\" etc. which might not be the data you wanted to be displayed in the list.\n\nIt would be better to display \"firstname\" and \"lastname\" instead.\n\nThis can easily be done by changing some settings in the models.py and/or the admin.py files. You will learn more about this in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Set Fields to Display",
    "url": "https://www.w3schools.com/django/django_admin_set_list_display.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Set Fields to Display\n❮ Previous\nNext ❯\nMake the List Display More Reader-Friendly\n\nWhen you display a Model as a list, Django displays each record as the string representation of the record object, which in our case is \"Member object (1)\", \"Member object(2)\" etc.:\n\nTo change this to a more reader-friendly format, we have two choices:\n\nChange the string representation function, __str__() of the Member Model\nSet the list_details property of the Member Model\nChange the String Representation Function\n\nTo change the string representation, we have to define the __str__() function of the Member Model in models.py, like this:\n\nmy_tennis_club/members/models.py:\n\nfrom django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField(null=True)\n  joined_date = models.DateField(null=True)\n\n  def __str__(self):\n    return f\"{self.firstname} {self.lastname}\"\n\n \n\n \n\n\nWhich gives us this result:\n\nDefining our own __str__() function is not a Django feature, it is how to change the string representation of objects in Python. Read more about Python objects in our Python object tutorial.\n\nSet list_display\n\nWe can control the fields to display by specifying them in in a list_display property in the admin.py file.\n\nFirst create a MemberAdmin() class and specify the list_display tuple, like this:\n\nmy_tennis_club/members/admin.py:\n\nfrom django.contrib import admin\nfrom .models import Member\n\n# Register your models here.\n\nclass MemberAdmin(admin.ModelAdmin):\n  list_display = (\"firstname\", \"lastname\", \"joined_date\",)\n  \nadmin.site.register(Member, MemberAdmin)\n\n \n\n \n\n \n\n \n\n\nRemember to add the MemberAdmin as an argumet in the admin.site.register(Member, MemberAdmin).\n\nNow go back to the browser and you should get this result:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin - Create User",
    "url": "https://www.w3schools.com/django/django_admin_create_user.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin - Create User\n❮ Previous\nNext ❯\nCreate User\n\nTo be able to log into the admin application, we need to create a user.\n\nThis is done by typing this command in the command view:\n\npy manage.py createsuperuser\n\nWhich will give this prompt:\n\nUsername:\n\nHere you must enter: username, e-mail address, (you can just pick a fake e-mail address), and password:\n\nUsername: johndoe\nEmail address: johndoe@dummymail.com\nPassword:\nPassword (again):\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nThis password is entirely numeric.\nBypass password validation and create user anyway? [y/N]:\n\nMy password did not meet the criteria, but this is a test environment, and I choose to create user anyway, by enter y:\n\nBypass password validation and create user anyway? [y/N]: y\n\nIf you press [Enter], you should have successfully created a user:\n\nSuperuser created successfully.\n\nNow start the server again:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/admin/ in the address bar.\n\nAnd fill in the form with the correct username and password:\n\nWhich should result in this user interface:\n\nHere you can create, read, update, and delete groups and users, but where is the Members model?\n\nMissing Model\n\nThe Members model is missing, as it should be, you have to tell Django which models that should be visible in the admin interface.\n\nYou will learn how to include the Members model in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Admin",
    "url": "https://www.w3schools.com/django/django_admin.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Admin\n❮ Previous\nNext ❯\nDjango Admin\n\nDjango Admin is a really great tool in Django, it is actually a CRUD* user interface of all your models!\n\n*CRUD stands for Create Read Update Delete.\n\nIt is free and comes ready-to-use with Django:\n\nGetting Started\n\nTo enter the admin user interface, start the server by navigating to the /myworld folder and execute this command:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/admin/ in the address bar.\n\nThe result should look like this:\n\nThe reason why this URL goes to the Django admin log in page can be found in the urls.py file of your project:\n\nmy_tennis_club/my_tennis_club/urls.py:\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('members.urls')),\n    path('admin/', admin.site.urls),\n]\n\n \n\n\nThe urlpatterns[] list takes requests going to admin/ and sends them to admin.site.urls, which is part of a built-in application that comes with Django, and contains a lot of functionality and user interfaces, one of them being the log-in user interface.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django 404",
    "url": "https://www.w3schools.com/django/django_404.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango 404 (page not found)\n❮ Previous\nNext ❯\nPage Not Found\n\nIf you try to access a page that does not exist (a 404 error), Django directs you to a built-in view that handles 404 errors.\n\nYou will learn how to customize this 404 view later in this chapter, but first, just try to request a page that does not exist.\n\nIn the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar.\n\nYou will get one of two results:\n\n1:\n\n2:\n\nIf you got the first result, you got directed to the built-in Django 404 template.\n\nIf you got the second result, then DEBUG is set to True in your settings, and you must set it to False to get directed to the 404 template.\n\nThis is done in the settings.py file, which is located in the project folder, in our case the my_tennis_club folder, where you also have to specify the host name from where your project runs from:\n\nExample\nGet your own Django Server\n\nSet the debug property to False, and allow the project to run from your local host:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n.\n.\n\nImportant: When DEBUG = False, Django requires you to specify the hosts you will allow this Django project to run from.\n\nIn production, this should be replaced with a proper domain name:\n\nALLOWED_HOSTS = ['yourdomain.com']\n\n\nIn the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar, and you will get the built-in 404 template:\n\nCustomize the 404 Template\n\nDjango will look for a file named 404.html in the templates folder, and display it when there is a 404 error.\n\nIf no such file exists, Django shows the \"Not Found\" that you saw in the example above.\n\nTo customize this message, all you have to do is to create a file in the templates folder and name it 404.html, and fill it with whatever you want:\n\nmy_tennis_club/members/templates/404.html:\n\n<!DOCTYPE html>\n<html>\n<title>Wrong address</title>\n<body>\n\n<h1>Ooops!</h1>\n\n<h2>I cannot find the file you requested!</h2>\n\n</body>\n</html>\n\nIn the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar, and you will get the customized 404 template:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Add Test View",
    "url": "https://www.w3schools.com/django/django_test_view.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Add Test View\n❮ Previous\nNext ❯\nTest View\n\nWhen testing different aspects of Django, it can be a good idea to have somewhere to test code without destroying the main project.\n\nThis is optional off course, but if you like to follow all steps in this tutorial, you should add a test view that is exactly like the one we create below.\n\nThen you can follow the examples and try them out on your own computer.\n\nAdd View\n\nStart by adding a view called \"testing\" in the views.py file:\n\nmy_tennis_club/members/views.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef main(request):\n  template = loader.get_template('main.html')\n  return HttpResponse(template.render())\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'fruits': ['Apple', 'Banana', 'Cherry'],   \n  }\n  return HttpResponse(template.render(context, request))\n \n\n \n\n \n\n \n\n \n\n \n\nURLs\n\nWe have to make sure that incoming urls to /testing/ will be redirected to the testing view.\n\nThis is done in the urls.py file in the members folder:\n\nmy_tennis_club/members/urls.py:\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main, name='main'),\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n    path('testing/', views.testing, name='testing'),    \n]\n\n \n\nTest Template\n\nWe also need a template where we can play around with HTML and Django code.\n\nYou might noticed that there was a reference to a template in the testing view?\n\nCreate a template called \"template.html\" in the templates folder:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n        templates/\n            404.html\n            all_members.html\n            details.html\n            main.html\n            master.html\n            myfirst.html\n            template.html\n\n\nOpen the template.html file and insert the following:\n\nmy_tennis_club/members/templates/template.html:\n\n<!DOCTYPE html>\n<html>\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n<p>In views.py you can see what the fruits variable looks like.</p>\n\n</body>\n</html>\nRun Example »\n\nIf the server is not running, navigate to the /my_tennis_club folder and execute this command in the command prompt:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/testing/ in the address bar.\n\nThe result should be like this:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Add Main Index Page",
    "url": "https://www.w3schools.com/django/django_add_main.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Add Main Index Page\n❮ Previous\nNext ❯\nMain Index Page\n\nOur project needs a main page.\n\nThe main page will be the landing page when someone visits the root folder of the project.\n\nNow, you get an error when visiting the root folder of your project:\n\n127.0.0.1:8000/.\n\nStart by creating a template called main.html:\n\nMain\nGet your own Django Server\n\nmy_tennis_club/members/templates/main.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club\n{% endblock %}\n\n\n{% block content %}\n  <h1>My Tennis Club</h1>\n\n  <h3>Members</h3>\n  \n  <p>Check out all our <a href=\"members/\">members</a></p>\n  \n{% endblock %}\n\nCreate new View\n\nThen create a new view called main, that will deal with incoming requests to root of the project:\n\nmy_tennis_club/members/views.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef main(request):\n  template = loader.get_template('main.html')\n  return HttpResponse(template.render())\n    \n \n\n \n\n \n\n\nThe main view does the following:\n\nloads the main.html template.\nOutputs the HTML that is rendered by the template.\nAdd URL\n\nNow we need to make sure that the root url points to the correct view.\n\nOpen the urls.py file and add the main view to the urlpatterns list:\n\nmy_tennis_club/members/urls.py:\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main, name='main'),\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n]\n\n \n\nRun Example »\nAdd Link Back to Main\n\nThe members page is missing a link back to the main page, so let us add that in the all_members.html template, in the content block:\n\nExample\n\nmy_tennis_club/members/templates/all_members.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n\n  <p><a href=\"/\">HOME</a></p>\n\n  <h1>Members</h1>\n  \n  <ul>\n    {% for x in mymembers %}\n      <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}\n\n \n\nRun Example »\n\nIf you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/.\n\nIf the server is down, you have to start it again with the runserver command:\n\npy manage.py runserver\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Add Master Template",
    "url": "https://www.w3schools.com/django/django_master_template.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Add Master Template\n❮ Previous\nNext ❯\nThe extends Tag\n\nIn the previous pages we created two templates, one for listing all members, and one for details about a member.\n\nThe templates have a set of HTML code that are the same for both templates.\n\nDjango provides a way of making a \"parent template\" that you can include in all pages to do the stuff that is the same in all pages.\n\nStart by creating a template called master.html, with all the necessary HTML elements:\n\nMaster\nGet your own Django Server\n\nmy_tennis_club/members/templates/master.html:\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>\n\nDo you see Django block Tag inside the <title> element, and the <body> element?\n\nThey are placeholders, telling Django to replace this block with content from other sources.\n\nModify Templates\n\nNow the two templates (all_members.html and details.html) can use this master.html template.\n\nThis is done by including the master template with the {% extends %} tag, and inserting a title block and a content block:\n\nMembers\n\nmy_tennis_club/members/templates/all_members.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n  <h1>Members</h1>\n  \n  <ul>\n    {% for x in mymembers %}\n      <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}\n\nRun Example »\nDetails\n\nmy_tennis_club/members/templates/details.html:\n\n{% extends \"master.html\" %}\n\n{% block title %}\n  Details about {{ mymember.firstname }} {{ mymember.lastname }}\n{% endblock %}\n\n\n{% block content %}\n  <h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n  \n  <p>Phone {{ mymember.phone }}</p>\n  <p>Member since: {{ mymember.joined_date }}</p>\n  \n  <p>Back to <a href=\"/members\">Members</a></p>\n  \n{% endblock %}\n\nRun Example »\n\nIf you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/members/.\n\nIf the server is down, you have to start it again with the runserver command:\n\npy manage.py runserver\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Add Link to Details",
    "url": "https://www.w3schools.com/django/django_add_link_details.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Add Link to Details\n❮ Previous\nNext ❯\nDetails Template\n\nThe next step in our web page will be to add a Details page, where we can list more details about a specific member.\n\nStart by creating a new template called details.html:\n\nmy_tennis_club/members/templates/details.html:\n\n<!DOCTYPE html>\n<html>\n\n<body>\n\n<h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n  \n<p>Phone: {{ mymember.phone }}</p>\n<p>Member since: {{ mymember.joined_date }}</p>\n\n<p>Back to <a href=\"/members\">Members</a></p>\n\n</body>\n</html>\nAdd Link in all-members Template\n\nThe list in all_members.html should be clickable, and take you to the details page with the ID of the member you clicked on:\n\nmy_tennis_club/members/templates/all_members.html:\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Members</h1>\n  \n<ul>\n  {% for x in mymembers %}\n    <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n  {% endfor %}\n</ul>\n\n</body>\n</html>\n\nCreate new View\n\nThen create a new view in the views.py file, that will deal with incoming requests to the /details/ url:\n\nmy_tennis_club/members/views.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\nThe details view does the following:\n\nGets the id as an argument.\nUses the id to locate the correct record in the Member table.\nloads the details.html template.\nCreates an object containing the member.\nSends the object to the template.\nOutputs the HTML that is rendered by the template.\nAdd URLs\n\nNow we need to make sure that the /details/ url points to the correct view, with id as a parameter.\n\nOpen the urls.py file and add the details view to the urlpatterns list:\n\nmy_tennis_club/members/urls.py:\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n]\n\n \n\nRun Example »\n\nIf you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/members/.\n\nIf the server is down, you have to start it again with the runserver command:\n\npy manage.py runserver\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Prepare Template",
    "url": "https://www.w3schools.com/django/django_prepare_template.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Prepare Template\n❮ Previous\nNext ❯\nCreate Template\n\nAfter creating Models, with the fields and data we want in them, it is time to display the data in a web page.\n\nStart by creating an HTML file named all_members.html and place it in the /templates/ folder:\n\nmy_tennis_club/members/templates/all_members.html:\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Members</h1>\n  \n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }} {{ x.lastname }}</li>\n  {% endfor %}\n</ul>\n\n</body>\n</html>\n\n\nDo you see the {% %} brackets inside the HTML document?\n\nThey are Django Tags, telling Django to perform some programming logic inside these brackets.\n\nYou will learn more about Django Tags in our Django Tags chapter.\n\nModify View\n\nNext we need to make the model data available in the template. This is done in the view.\n\nIn the view we have to import the Member model, and send it to the template like this:\n\nmy_tennis_club/members/views.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n\nRun Example »\n\nThe members view does the following:\n\nCreates a mymembers object with all the values of the Member model.\nLoads the all_members.html template.\nCreates an object containing the mymembers object.\nSends the object to the template.\nOutputs the HTML that is rendered by the template.\nThe Result\n\nWe have created an example so that you can see the result:\n\nRun Example »\n\nIf you have followed all the steps on your own computer, you can see the result in your own browser:\n\nStart the server by navigating to the /my_tennis_club/ folder and execute this command:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/members/ in the address bar.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Delete Data",
    "url": "https://www.w3schools.com/django/django_delete_data.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Delete Data\n❮ Previous\nNext ❯\nDelete Records\n\nTo delete a record in a table, start by getting the record you want to delete:\n\n>>> from members.models import Member\n>>> x = Member.objects.all()[5]\n\nx will now represent the member at index 5, which is \"Jane Doe\", but to make sure, let us see if that is correct:\n\n>>> x.firstname\n\nThis should give you this result:\n\n'Jane'\n\nNow we can delete the record:\n\n>>> x.delete()\n\nThe result will be:\n\n(1, {'members.Member': 1})\n\nWhich tells us how many items were deleted, and from which Model.\n\nIf we look at the Member Model, we can see that 'Jane Doe' is removed from the Model:\n\n>>> Member.objects.all().values()\n<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'},\n{'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'}]>\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Update Model",
    "url": "https://www.w3schools.com/django/django_update_model.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Update Model\n❮ Previous\nNext ❯\nAdd Fields in the Model\n\nTo add a field to a table after it is created, open the models.py file, and make your changes:\n\nmy_tennis_club/members/models.py:\n\nfrom django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField()\n  joined_date = models.DateField()\n\n\nAs you can see, we want to add phone and joined_date to our Member Model.\n\nThis is a change in the Model's structure, and therefor we have to make a migration to tell Django that it has to update the database:\n\npy manage.py makemigrations members\n\nWhich, in my case, will result in a prompt, because I try to add fields that are not allowed to be null, to a table that already contains records.\n\nAs you can see, Django asks if I want to provide the fields with a specific value, or if I want to stop the migration and fix it in the model:\n\npy manage.py makemigrations members\nYou are trying to add a non-nullable field 'joined_date' to members without a default; we can't do that (the database needs something to populate existing rows).\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)\n 2) Quit, and let me add a default in models.py\nSelect an option:\n\nI will select option 2, and open the models.py file again and allow NULL values for the two new fields:\n\nmy_tennis_club/members/models.py:\n\nfrom django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField(null=True)\n  joined_date = models.DateField(null=True)\n\n\nAnd make the migration once again:\n\npy manage.py makemigrations members\n\nWhich will result in this:\n\nMigrations for 'members':\n  members\\migrations\\0002_member_joined_date_member_phone.py\n    - Add field joined_date to member\n    - Add field phone to member\n\nRun the migrate command:\n\npy manage.py migrate\n\nWhich will result in this output:\n\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, members, sessions\nRunning migrations:\n  Applying members.0002_member_joined_date_member_phone... OK\n\n(myworld) C:\\Users\\Your Name\\myworld\\my_tennis_club>\nInsert Data\n\nWe can insert data to the two new fields with the same approach as we did in the Update Data chapter:\n\nFirst we enter the Python Shell:\n\npy manage.py shell\n\nNow we are in the shell, the result should be something like this:\n\nPython 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>>\n\nAt the bottom, after the three >>> write the following (and hit [enter] for each line):\n\n>>> from members.models import Member\n>>> x = Member.objects.all()[0]\n>>> x.phone = 5551234\n>>> x.joined_date = '2022-01-05'\n>>> x.save()\n\nThis will insert a phone number and a date in the Member Model, at least for the first record, the four remaining records will for now be left empty. We will deal with them later in the tutorial.\n\nExecute this command to see if the Member table got updated:\n\n>>> Member.objects.all().values()\n\nThe result should look like this:\n\n<QuerySet [\n{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes', 'phone': 5551234, 'joined_date': datetime.date(2022, 1, 5)},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None},\n{'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None}]>\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Update Data",
    "url": "https://www.w3schools.com/django/django_update_data.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Update Data\n❮ Previous\nNext ❯\nUpdate Records\n\nTo update records that are already in the database, we first have to get the record we want to update:\n\n>>> from members.models import Member\n>>> x = Member.objects.all()[4]\n\nx will now represent the member at index 4, which is \"Stale Refsnes\", but to make sure, let us see if that is correct:\n\n>>> x.firstname\n\nThis should give you this result:\n\n'Stale'\n\nNow we can change the values of this record:\n\n>>> x.firstname = \"Stalikken\"\n>>> x.save()\n\nExecute this command to see if the Member table got updated:\n\n>>> Member.objects.all().values()\n\nHopefully, the result will look like this:\n\n<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'},\n{'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'},\n{'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Insert Data",
    "url": "https://www.w3schools.com/django/django_insert_data.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Insert Data\n❮ Previous\nNext ❯\nAdd Records\n\nThe Members table created in the previous chapter is empty.\n\nWe will use the Python interpreter (Python shell) to add some members to it.\n\nTo open a Python shell, type this command:\n\npy manage.py shell\n\nNow we are in the shell, the result should be something like this:\n\nPython 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>>\n\nAt the bottom, after the three >>> write the following:\n\n>>> from members.models import Member\n\nHit [enter] and write this to look at the empty Member table:\n\n>>> Member.objects.all()\n\nThis should give you an empty QuerySet object, like this:\n\n<QuerySet []>\n\nA QuerySet is a collection of data from a database.\n\nRead more about QuerySets in the Django QuerySet chapter.\n\nAdd a record to the table, by executing these two lines:\n\n>>> member = Member(firstname='Emil', lastname='Refsnes')\n>>> member.save()\n\nExecute this command to see if the Member table got a member:\n\n>>> Member.objects.all().values()\n\nHopefully, the result will look like this:\n\n<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}]>\nAdd Multiple Records\n\nYou can add multiple records by making a list of Member objects, and execute .save() on each entry:\n\n>>> member1 = Member(firstname='Tobias', lastname='Refsnes')\n>>> member2 = Member(firstname='Linus', lastname='Refsnes')\n>>> member3 = Member(firstname='Lene', lastname='Refsnes')\n>>> member4 = Member(firstname='Stale', lastname='Refsnes')\n>>> member5 = Member(firstname='Jane', lastname='Doe')\n>>> members_list = [member1, member2, member3, member4, member5]\n>>> for x in members_list:\n>>>   x.save()\n\nNow there are 6 members in the Member table:\n\n>>> Member.objects.all().values()\n<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'},\n{'id': 5, 'firstname': 'Stale', 'lastname': 'Refsnes'},\n{'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Models",
    "url": "https://www.w3schools.com/django/django_models.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Models\n❮ Previous\nNext ❯\n\nA Django model is a table in your database.\n\nDjango Models\n\nUp until now in this tutorial, output has been static data from Python or HTML templates.\n\nNow we will see how Django allows us to work with data, without having to change or upload files in the prosess.\n\nIn Django, data is created in objects, called Models, and is actually tables in a database.\n\nCreate Table (Model)\n\nTo create a model, navigate to the models.py file in the /members/ folder.\n\nOpen it, and add a Member table by creating a Member class, and describe the table fields in it:\n\nmy_tennis_club/members/models.py:\n\nfrom django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n\nThe first field, firstname, is a Text field, and will contain the first name of the members.\n\nThe second field, lastname, is also a Text field, with the member's last name.\n\nBoth firstname and lastname is set up to have a maximum of 255 characters.\n\nSQLite Database\n\nWhen we created the Django project, we got an empty SQLite database.\n\nIt was created in the my_tennis_club root folder, and has the filename db.sqlite3.\n\nBy default, all Models created in the Django project will be created as tables in this database.\n\nMigrate\n\nNow when we have described a Model in the models.py file, we must run a command to actually create the table in the database.\n\nNavigate to the /my_tennis_club/ folder and run this command:\n\npy manage.py makemigrations members\n\nWhich will result in this output:\n\nMigrations for 'members':\n  members\\migrations\\0001_initial.py\n    - Create model Member\n\n(myworld) C:\\Users\\Your Name\\myworld\\my_tennis_club>\n\nDjango creates a file describing the changes and stores the file in the /migrations/ folder:\n\nmy_tennis_club/members/migrations/0001_initial.py:\n\n# Generated by Django 4.1.2 on 2022-10-27 11:14\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Member',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('firstname', models.CharField(max_length=255)),\n                ('lastname', models.CharField(max_length=255)),\n            ],\n        ),\n    ]\n\n\nNote that Django inserts an id field for your tables, which is an auto increment number (first record gets the value 1, the second record 2 etc.), this is the default behavior of Django, you can override it by describing your own id field.\n\nThe table is not created yet, you will have to run one more command, then Django will create and execute an SQL statement, based on the content of the new file in the /migrations/ folder.\n\nRun the migrate command:\n\npy manage.py migrate\n\nWhich will result in this output:\n\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, members, sessions\nRunning migrations:\n  Applying members.0001_initial... OK\n\n(myworld) C:\\Users\\Your Name\\myworld\\my_tennis_club>\n\nNow you have a Member table in you database!\n\nView SQL\n\nAs a side-note: you can view the SQL statement that were executed from the migration above. All you have to do is to run this command, with the migration number:\n\npy manage.py sqlmigrate members 0001\n\nWhich will result in this output:\n\nBEGIN;\n--\n-- Create model Member\n--\nCREATE TABLE \"members_member\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"firstname\" varchar(255) NOT NULL, \"lastname\" varchar(255) NOT NULL); COMMIT;\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Templates",
    "url": "https://www.w3schools.com/django/django_templates.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Templates\n❮ Previous\nNext ❯\nTemplates\n\nIn the Django Intro page, we learned that the result should be in HTML, and it should be created in a template, so let's do that.\n\nCreate a templates folder inside the members folder, and create a HTML file named myfirst.html.\n\nThe file structure should be like this:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n        templates/\n            myfirst.html\n\n\nOpen the HTML file and insert the following:\n\nmy_tennis_club/members/templates/myfirst.html:\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Hello World!</h1>\n<p>Welcome to my first Django project!</p>\n\n</body>\n</html>\nModify the View\n\nOpen the views.py file and replace the members view with this:\n\nmy_tennis_club/members/views.py:\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\ndef members(request):\n  template = loader.get_template('myfirst.html')\n  return HttpResponse(template.render())\nChange Settings\n\nTo be able to work with more complicated stuff than \"Hello World!\", We have to tell Django that a new app is created.\n\nThis is done in the settings.py file in the my_tennis_club folder.\n\nLook up the INSTALLED_APPS[] list and add the members app like this:\n\nmy_tennis_club/my_tennis_club/settings.py:\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'members'\n]\n \n\n\nThen run this command:\n\npy manage.py migrate\n\nWhich will produce this output:\n\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying sessions.0001_initial... OK\n\n(myworld) C:\\Users\\Your Name\\myworld\\my_tennis_club>\n\n\nStart the server by navigating to the /my_tennis_club folder and execute this command:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/members/ in the address bar.\n\nThe result should look like this:\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django URLs",
    "url": "https://www.w3schools.com/django/django_urls.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango URLs\n❮ Previous\nNext ❯\nURLs\n\nCreate a file named urls.py in the same folder as the views.py file, and type this code in it:\n\nmy_tennis_club/members/urls.py:\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('members/', views.members, name='members'),\n]\n\n\nThe urls.py file you just created is specific for the members application. We have to do some routing in the root directory my_tennis_club as well. This may seem complicated, but for now, just follow the instructions below.\n\nThere is a file called urls.py on the my_tennis_club folder, open that file and add the include module in the import statement, and also add a path() function in the urlpatterns[] list, with arguments that will route users that comes in via 127.0.0.1:8000/.\n\nThen your file will look like this:\n\nmy_tennis_club/my_tennis_club/urls.py:\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('members.urls')),\n    path('admin/', admin.site.urls),\n]\n\n \n\n \n\n\nIf the server is not running, navigate to the /my_tennis_club folder and execute this command in the command prompt:\n\npy manage.py runserver\n\nIn the browser window, type 127.0.0.1:8000/members/ in the address bar.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Views",
    "url": "https://www.w3schools.com/django/django_views.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Views\n❮ Previous\nNext ❯\nViews\n\nDjango views are Python functions that takes http requests and returns http response, like HTML documents.\n\nA web page that uses Django is full of views with different tasks and missions.\n\nViews are usually put in a file called views.py located on your app's folder.\n\nThere is a views.py in your members folder that looks like this:\n\nmy_tennis_club/members/views.py:\n\nfrom django.shortcuts import render\n\n# Create your views here.\n\nFind it and open it, and replace the content with this:\n\nmy_tennis_club/members/views.py:\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef members(request):\n    return HttpResponse(\"Hello world!\")\n\nNote: The name of the view does not have to be the same as the application.\n\nI call it members because I think it fits well in this context.\n\nThis is a simple example on how to send a response back to the browser.\n\nBut how can we execute the view? Well, we must call the view via a URL.\n\nYou will learn about URLs in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Create App",
    "url": "https://www.w3schools.com/django/django_create_app.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Create App\n❮ Previous\nNext ❯\nWhat is an App?\n\nAn app is a web application that has a specific meaning in your project, like a home page, a contact form, or a members database.\n\nIn this tutorial we will create an app that allows us to list and register members in a database.\n\nBut first, let's just create a simple Django app that displays \"Hello World!\".\n\nCreate App\n\nI will name my app members.\n\nStart by navigating to the selected location where you want to store the app, in my case the my_tennis_club folder, and run the command below.\n\nIf the server is still running, and you are not able to write commands, press [CTRL] [BREAK], or [CTRL] [C] to stop the server and you should be back in the virtual environment.\n\npy manage.py startapp members\n\nDjango creates a folder named members in my project, with this content:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n    members/\n        migrations/\n            __init__.py\n        __init__.py\n        admin.py\n        apps.py\n        models.py\n        tests.py\n        views.py\n\n\nThese are all files and folders with a specific meaning. You will learn about most of them later in this tutorial.\n\nFirst, take a look at the file called views.py.\n\nThis is where we gather the information we need to send back a proper response.\n\nYou will learn more about views in the next chapter.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Create Project",
    "url": "https://www.w3schools.com/django/django_create_project.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Create Project\n❮ Previous\nNext ❯\nMy First Project\n\nOnce you have come up with a suitable name for your Django project, like mine: my_tennis_club, navigate to where in the file system you want to store the code (in the virtual environment), I will navigate to the myworld folder, and run this command in the command prompt:\n\ndjango-admin startproject my_tennis_club\n\nDjango creates a my_tennis_club folder on my computer, with this content:\n\nmy_tennis_club\n    manage.py\n    my_tennis_club/\n        __init__.py\n        asgi.py\n        settings.py\n        urls.py\n        wsgi.py\n\n\nThese are all files and folders with a specific meaning, you will learn about some of them later in this tutorial, but for now, it is more important to know that this is the location of your project, and that you can start building applications in it.\n\nRun the Django Project\n\nNow that you have a Django project, you can run it, and see what it looks like in a browser.\n\nNavigate to the /my_tennis_club folder and execute this command in the command prompt:\n\npy manage.py runserver\n\nWhich will produce this result:\n\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nOctober 27, 2022 - 13:03:14\nDjango version 4.1.2, using settings 'my_tennis_club.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CTRL-BREAK.\n\nOpen a new browser window and type 127.0.0.1:8000 in the address bar.\n\nThe result:\n\nWhat's Next?\n\nWe have a Django project!\n\nThe next step is to make an app in your project.\n\nYou cannot have a web page created with Django without an app.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django - Install Django",
    "url": "https://www.w3schools.com/django/django_install_django.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nInstall Django\n❮ Previous\nNext ❯\nInstall Django\n\nNow, that we have created a virtual environment, we are ready to install Django.\n\nNote: Remember to install Django while you are in the virtual environment!\n\nDjango is installed using pip, with this command:\n\nWindows:\n\n(myworld) C:\\Users\\Your Name>py -m pip install Django\n\nUnix/MacOS:\n\n(myworld) ... $ python -m pip install Django\n\nWhich will give a result that looks like this (at least on my Windows machine):\n\nCollecting Django\n  Downloading Django-4.0.3-py3-none-any.whl (8.0 MB)\n      |████████████████████████████████| 8.0 MB 2.2 MB/s\nCollecting sqlparse>=0.2.2\n  Using cached sqlparse-0.4.2-py3-none-any.whl (42 kB)\nCollecting asgiref<4,>=3.4.1\n  Downloading asgiref-3.5.0-py3-none-any.whl (22 kB)\nCollecting tzdata; sys_platform == \"win32\"\n  Downloading tzdata-2021.5-py2.py3-none-any.whl (339 kB)\n      |████████████████████████████████| 339 kB 6.4 MB/s\nInstalling collected packages: sqlparse, asgiref, tzdata, Django\nSuccessfully installed Django-4.0.3 asgiref-3.5.0 sqlparse-0.4.2 tzdata-2021.5\nWARNING: You are using pip version 20.2.3; however, version 22.3 is available.\nYou should consider upgrading via the 'C:\\Users\\Your Name\\myworld\\Scripts\\python.exe -m pip install --upgrade pip' command.\n\nThat's it! Now you have installed Django in your new project, running in a virtual environment!\n\nWindows, Mac, or Unix?\n\nYou can run this project on either one. There are some small differences, like when writing commands in the command prompt, Windows uses py as the first word in the command line, while Unix and MacOS use python:\n\nWindows:\n\npy --version\n\nUnix/MacOS:\n\npython --version\n\nIn the rest of this tutorial, we will be using the Windows command.\n\nCheck Django Version\n\nYou can check if Django is installed by asking for its version number like this:\n\n(myworld) C:\\Users\\Your Name>django-admin --version\n\nIf Django is installed, you will get a result with the version number:\n\n4.1.2\nWhat's Next?\n\nNow you are ready to create a Django project in a virtual environment on your computer.\n\nIn the next chapters of this tutorial we will create a Django project and look at the various features of Django and hopefully make you a Django developer.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Create Virtual Environment",
    "url": "https://www.w3schools.com/django/django_create_virtual_environment.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango - Create Virtual Environment\n❮ Previous\nNext ❯\nVirtual Environment\n\nIt is suggested to have a dedicated virtual environment for each Django project, and one way to manage a virtual environment is venv, which is included in Python.\n\nThe name of the virtual environment is your choice, in this tutorial we will call it myworld.\n\nType the following in the command prompt, remember to navigate to where you want to create your project:\n\nWindows:\n\npy -m venv myworld\n\nUnix/MacOS:\n\npython -m venv myworld\n\nThis will set up a virtual environment, and create a folder named \"myworld\" with subfolders and files, like this:\n\nmyworld\n  Include\n  Lib\n  Scripts\n  pyvenv.cfg\n\nThen you have to activate the environment, by typing this command:\n\nWindows:\n\nmyworld\\Scripts\\activate.bat\n\nUnix/MacOS:\n\nsource myworld/bin/activate\n\nOnce the environment is activated, you will see this result in the command prompt:\n\nWindows:\n\n(myworld) C:\\Users\\Your Name>\n\nUnix/MacOS:\n\n(myworld) ... $\n\nNote: You must activate the virtual environment every time you open the command prompt to work on your project.\n\nInstall Django\n\nIn the next chapter you will finally learn how to install Django!\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Getting Started",
    "url": "https://www.w3schools.com/django/django_getstarted.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Getting Started\n❮ Previous\nNext ❯\n\nTo install Django, you must have Python installed, and a package manager like PIP.\n\nPIP is included in Python from version 3.4.\n\nDjango Requires Python\n\nTo check if your system has Python installed, run this command in the command prompt:\n\npython --version\n\nIf Python is installed, you will get a result with the version number, like this\n\nPython 3.9.2\n\nIf you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/\n\nPIP\n\nTo install Django, you must use a package manager like PIP, which is included in Python from version 3.4.\n\nTo check if your system has PIP installed, run this command in the command prompt:\n\npip --version\n\nIf PIP is installed, you will get a result with the version number.\n\nFor me, on a windows machine, the result looks like this:\n\npip 20.2.3 from c:\\python39\\lib\\site-packages\\pip (python 3.9)\n\nIf you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/\n\nVirtual Environment\n\nIt is suggested to have a dedicated virtual environment for each Django project, and in the next chapter you will learn how to create a virtual environment, and then install Django in it.\n\n❮ Previous\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  },
  {
    "title": "Django Tutorial",
    "url": "https://www.w3schools.com/django/index.php",
    "html": "Tutorials \nExercises \nCertificates \nServices \nSearch field\n\nLog in\nSign Up\n Get Certified\n Spaces\n Jobs\n   ❮   \nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AWS AI GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE \n     ❯   \nDjango Tutorial\nDjango Home\nDjango Intro\nDjango Get Started\nCreate Virtual Environment\nInstall Django\nDjango Create Project\nDjango Create App\nDjango Views\nDjango URLs\nDjango Templates\nDjango Models\nDjango Insert Data\nDjango Update Data\nDjango Delete Data\nDjango Update Model\n\n\nDisplay Data\nPrepare Template and View\nAdd Link to Details\nAdd Master Template\nAdd Main Index Page\nDjango 404 Template\nAdd Test View\n\n\nAdmin\nDjango Admin\nCreate User\nInclude Models\nSet List Display\nUpdate Members\nAdd Members\nDelete Members\n\n\nDjango Syntax\nDjango Variables\nDjango Tags\nDjango If Else\nDjango For Loop\nDjango Comment\nDjango Include\n\n\nQuerySets\nQuerySet Introduction\nQuerySet Get\nQuerySet Filter\nQuerySet Order By\n\n\nStatic Files\nAdd Static Files\nInstall WhiteNoise\nCollect Static Files\nAdd Global Static Files\nAdd Styles to the Project\n\n\nPostgreSQL\nPostgreSQL Intro\nCreate AWS Account\nCreate Database in RDS\nConnect to Database\nAdd Members\n\n\nDeploy Django\nElastic Beanstalk (EB)\nCreate requirements.txt\nCreate django.config\nCreate .zip File\nDeploy with EB\nUpdate Project\n\n\nMore Django\nAdd Slug Field\nAdd Bootstrap 5\n\n\nDjango References\nTemplate Tag Reference\nFilter Reference\nField lookups Reference\n\n\nDjango Exercises\nDjango Compiler\nDjango Exercises\nDjango Quiz\nDjango Server\nDjango Certificate\n\n\n\nDjango Tutorial\n❮ Home\nNext ❯\n[+:\n\nDjango is a back-end server side web framework.\n\nDjango is free, open source and written in Python.\n\nDjango makes it easier to build web pages using Python.\n\nStart learning Django now ❯\nLearning by Doing\n\nIn this tutorial you get a step by step guide on how to install and create a Django project. You will learn how to create a project where you can add, read, update or delete data.\n\nYou will learn how to make HTML Templates and use Django Template Tags to insert data within a HTML document.\n\nYou will learn how to work with QuerySets to extract, filter, and sort data from the database.\n\nYou will also learn how to set up a PostgreSQL database and how to deploy your Django project to the world.\n\nDjango\nIntroduction\n \nGetting Started\n\n \nVirtual Environment\n\n \nInstall Django\n\n \nCreate Project\n\n \nCreate App\n\n \nViews\n\n \nUrls\n\n \nTemplates\n\n \nModels\n\n \nInsert Data\n\n \nUpdate Data\n\n \nDelete Data\n\n \nUpdate Model\n\nDisplay\nPrepare\n\n \nAdd Details\n\n \nAdd Master\n\n \nAdd Main\n\n \nAdd 404\n\n \nAdd Test\n\nAdmin\nAdmin\n\n \nCreate User\n\n \nModels\n\n \nList Display\n\n \nUpdate\n\n \nAdd\n\n \nDelete\n\nSyntax\nVariables\n\n \nTags\n\n \nIf...Else\n\n \nFor Loop\n\n \nComment\n\n \nInclude\n\nQuerySets\nQuerySet\n\n \nGet Data\n\n \nFilter\n\n \nOrder By\n\nStatic Files\nAdd Static\n\n \nWhiteNoise\n\n \nCollect\n\n \nGlobal Static\n\n \nAdd to Poject\n\nPostgreSQL\nIntro\n\n \nAWS Account\n\n \nRDS\n\n \nConnect\n\n \nAdd Members\n\nDeploy\nElastic Beanstalk\n\n \nRequirements\n\n \ndjango.config\n\n \nCreate .zip\n\n \nDeploy\n\n \nUpdate\n\nDjango Exercises\nTest Yourself With Exercises\nExercise:\n\nInsert the missing parts to write a Django variable in a template:\n\n<h1>Hello  firstname , how are you?</h1>\n\nSubmit Answer »\n\nStart the Exercise\n\nDjango Quiz\n\nLearn by taking a quiz! The quiz will give you a signal of how much you know about Django.\n\nStart Django Quiz\n\nLearning by Examples\n\nIn the tutorial we will use examples to better explain the various concepts.\n\nExample\nGet your own Django Server\n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>\nRun Example »\nMy Learning\n\nTrack your progress with the free \"My Learning\" program here at W3Schools.\n\nLog in to your account, and start earning points!\n\nThis is an optional feature. You can study W3Schools without using My Learning.\n\n\n\nLearning by References\n\nYou will also find references over the most common Django features:\n\nTemplate Tags QuerySet Filters Field Lookups\n❮ Home\nLog in to track progress\nNext ❯\nCOLOR PICKER\n   \nSPACES\nUPGRADE\nNEWSLETTER\nGET CERTIFIED\nREPORT ERROR\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\n\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\n\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\n\nGet Certified\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate\n\n    FORUM ABOUT\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.\n\nCopyright 1999-2023 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS.\n\n\nDo not share my Personal Information"
  }
]